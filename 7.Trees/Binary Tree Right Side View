Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res= new ArrayList<>();
        dfs(root,res,0);
        return res;
    }
    private void dfs(TreeNode node, List<Integer> result, int level){
        if(node==null){
            return;
        }
        if(level==result.size()){
            result.add(node.val);
        }
        dfs(node.right, result,level+1);
        dfs(node.left, result, level+1);
    }
}
