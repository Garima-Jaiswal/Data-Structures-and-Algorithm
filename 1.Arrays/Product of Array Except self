Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int leftP[]= new int[nums.length];
        int rightP[]= new int[nums.length];
        for(int i=0,temp=1;i<nums.length;i++){
            leftP[i]= temp;
            temp*=nums[i];
        }
        for(int i=nums.length-1,temp=1;i>=0;i--){
            rightP[i]= temp;
            temp*=nums[i];
        }
        int result[]= new int[nums.length];
        for(int i=0;i<nums.length;i++){
            result[i]=leftP[i]*rightP[i];
        }
        return result;
        
    }
}


APPROCH-2

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int result[]= new int[nums.length];
        for(int i=0,temp=1;i<nums.length;i++){
            result[i]= temp;
            temp*=nums[i];
        }
        for(int i=nums.length-1,temp=1;i>=0;i--){
            result[i]*= temp;
            temp*=nums[i];
        }
    
        return result;
        
    }
}
