You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<String>  stack= new Stack<>();
        for(String token: tokens){
            if(isOpeator(token)){
                int n2= Integer.parseInt(stack.pop());
                int n1= Integer.parseInt(stack.pop());
                int result=0;
                if(token.equals("+")){
                    result= n1+n2;
                }
                else if(token.equals("-")){
                    result= n1-n2;
                }
                else if(token.equals("*")){
                    result= n1*n2;
                }
                else if(token.equals("/")){
                    result= n1/n2;
                }
                stack.push(Integer.toString(result));
            }
            else{
                stack.push(token);
            }
        }
        return Integer.parseInt(stack.peek()); 
    }
    private boolean isOpeator(String str){
        if(str.equals("+")|| str.equals("-")|| str.equals("*")|| str.equals("/")){
            return true;
        }
        return false;
    }
}
 
